<%@ CodeTemplate Language="C#" TargetLanguage="VB.NET" Description="Generates the BLL Module Info class." %>
<%@ Property Name="SourceTable" Type="SmartCode.Model.Mapping.CS.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="Namespace" Type="System.String" Default="YourCompany" Category="Style" Description="Used to generate the Namespace declaration." %>
<%@ Property Name="CompanyName" Type="System.String" Default="MyCompany" Category="Style" Description="Used to generate the Namespace declaration." %>
<%@ Property Name="ModuleName" Type="System.String" Default="" Category="Style" Description="" %>
<%@ Assembly Name="SmartCode.Model.Mapping" %>
<%@ Import Namespace="SmartCode.Model.Mapping.CS" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%-- 
	Rev 2007.03.03
	For the latest version of this template, http://quiziqal.com/files/default.aspx		
--%>

Namespace <%= Namespace %>.Modules.<%=ModuleName%>

    ''' <summary>
    ''' The Info class for <%= ModuleName %>
    ''' </summary>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' </history>
    ''' -----------------------------------------------------------------------------
    Public Class <%= ModuleName %>Info
	
#Region "Private Members"
		<% foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) { %>
		<%= GetMemberVariableDeclarationStatement(column) %>
		<% } %>
		<% foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) { %>
		<%= GetMemberVariableDeclarationStatement(column) %>
		<% } %>
#End Region

#Region "Constructors"
        ' initialization
        Public Sub New()
        End Sub
		
        Public Sub New(<%= GetPrimaryKeyParameters(SourceTable, true, "vb").Trim() %>, <%= GetNonPrimaryKeyParameters(SourceTable, true, false, "vb").Trim() %>)
		<% for (int i=0; i<SourceTable.Columns.Count; i++) {%>
            Me.<%=SourceTable.Columns[i].Name%> = <%=SourceTable.Columns[i].Name%>
        <% } %>
        End Sub
#End Region

#Region "Public Properties"
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
		Public Property <%= GetPropertyName(SourceTable.PrimaryKey.MemberColumns[i]) %>() as <%= GetVBVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %>
			Get
				Return <%= GetMemberVariableName(SourceTable.PrimaryKey.MemberColumns[i]) %>
			End Get
			Set(ByVal Value as <%= GetVBVariableType(SourceTable.PrimaryKey.MemberColumns[i]) %>)
				<%= GetMemberVariableName(SourceTable.PrimaryKey.MemberColumns[i]) %> = Value
			End Set
		End Property
		<% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) Response.Write("\r\n"); %>	
		<% } %>
		
		<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
		Public Property <%= GetPropertyName(SourceTable.NonPrimaryKeyColumns[i]) %>() as <%= GetVBVariableType(SourceTable.NonPrimaryKeyColumns[i]) %> 
			Get
				Return <%= GetMemberVariableName(SourceTable.NonPrimaryKeyColumns[i]) %>
			End Get
			Set(ByVal Value as <%= GetVBVariableType(SourceTable.NonPrimaryKeyColumns[i]) %>)
				<%= GetMemberVariableName(SourceTable.NonPrimaryKeyColumns[i]) %> = Value
			End Set
		End Property
		<% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) Response.Write("\r\n"); %>		
		<% } %>
#End Region

    End Class

End Namespace

<!-- #include file="%%DNN4%%CommonFunctions.cs" -->