<%@ CodeTemplate Language="C#" TargetLanguage="VB.NET" Description="Generates the BLL Module Controller class." %>
<%@ Property Name="SourceTable" Type="SmartCode.Model.Mapping.CS.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="IsSearchable" Type="System.Boolean" Default="True" Category="Options" Description="If true Interface for search will be added." %>
<%@ Property Name="IsPortable" Type="System.Boolean" Default="True" Category="Options" Description="If true Interface for Import/Export will be added." %>
<%@ Property Name="InsertKeyword" Type="System.String" Default="Add" Category="Style" Description="Suffix to use for all generated INSERT stored procedures." %>
<%@ Property Name="UpdateKeyword" Type="System.String" Default="Update" Category="Style" Description="Suffix to use for all generated UPDATE stored procedures." %>
<%@ Property Name="DeleteKeyword" Type="System.String" Default="Delete" Category="Style" Description="Suffix to use for all generated DELETE stored procedures." %>
<%@ Property Name="SelectKeyword" Type="System.String" Default="Get" Category="Style" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="ListKeyword" Type="System.String" Default="GetAll" Category="Style" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="Namespace" Type="System.String" Default="YourCompany" Category="Style" Description="Used to generate the Namespace declaration." %>
<%@ Property Name="ModuleName" Type="System.String" Default="" Category="Style" Description="" %>
<%@ Assembly Name="SmartCode.Model.Mapping" %>
<%@ Import Namespace="SmartCode.Model.Mapping.CS" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%-- 
	Rev 2007.03.03
	For the latest version of this template, http://quiziqal.com/files/default.aspx		
--%>
Imports System
Imports System.Configuration
Imports System.Data
Imports System.XML
Imports System.Web
Imports System.Collections.Generic
Imports DotNetNuke
Imports DotNetNuke.Services.Search
Imports DotNetNuke.Common.Utilities.XmlUtils

Namespace <%= Namespace %>.Modules.<%=ModuleName%>

    ''' <summary>
    ''' The Controller class for <%=ModuleName%>
    ''' </summary>
    ''' <remarks>
    ''' </remarks>
    ''' <history>
    ''' </history>
    ''' -----------------------------------------------------------------------------
    <DataObject(True)> _
	Public Class <%= ModuleName %>Controller
<% if (IsSearchable) { %>	
        Implements Entities.Modules.ISearchable
<% }
if (IsPortable) { %>	
        Implements Entities.Modules.IPortable
<%}%>
		
#Region "Public Methods"

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a <%=ModuleName%> from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function <%= GetMethodName(ModuleName, SelectKeyword) %>(<%= GetPrimaryKeyParameters(SourceTable, true, "vb").Trim() %><%= GetModuleIdParameter(SourceTable, true, true, "vb") %>) As <%= ModuleName %>Info
            Return CType(CBO.FillObject(DataProvider.Instance().<%= GetMethodName(ModuleName, SelectKeyword) %>(<%= GetPrimaryKeyParameters(SourceTable, false, "vb")%><%= GetModuleIdParameter(SourceTable, false, true, "vb") %>), GetType(<%= ModuleName %>Info)), <%= ModuleName %>Info)
        End Function

<%
string ColumnName = "";

for( int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++ )
{
	if(SourceTable.NonPrimaryKeyColumns[i].ExtendedProperties["CS_Description"].Value.ToString().ToLower().StartsWith("get"))
	{
		ColumnName = SourceTable.NonPrimaryKeyColumns[i].Name;
%>
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of <%=ModuleName%>s from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function <%= GetMethodName(ModuleName, SelectKeyword, ColumnName) %>(<%= GetSelectByColumnNameParameter(SourceTable.NonPrimaryKeyColumns[i], true, true, "vb").Trim() %><%= GetModuleIdParameter(SourceTable, true, true, "vb") %>) As List(Of <%= ModuleName %>Info)
            Return CBO.FillCollection(Of <%= ModuleName %>Info)(DataProvider.Instance().<%= GetMethodName(ModuleName, SelectKeyword, ColumnName) %>(<%= GetSelectByColumnNameParameter(SourceTable.NonPrimaryKeyColumns[i], false, true, "vb").Trim() %><%= GetModuleIdParameter(SourceTable, false, true, "vb") %>))
        End Function
		
<%
	} // if
} // for
%>
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' retrieves a collection of <%=ModuleName%>s from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Select)> _
		Public Function <%= GetMethodName(ModuleName, ListKeyword, true) %>(<%= GetModuleIdParameter(SourceTable, true, false, "vb") %>) As List(Of <%= ModuleName %>Info)
            Return CBO.FillCollection(Of <%= ModuleName %>Info)(DataProvider.Instance().<%= GetMethodName(ModuleName, ListKeyword, true) %>(<%= GetModuleIdParameter(SourceTable, false, false, "vb") %>))
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' adds a new <%=ModuleName%> to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Insert)> _
		Public Function <%= GetMethodName(ModuleName, InsertKeyword) %>(ByVal obj<%= ModuleName %> As <%= ModuleName %>Info) As Integer
                Return DataProvider.Instance().<%= GetMethodName(ModuleName, InsertKeyword) %>(<%= GetNonPrimaryKeyParametersForObject(SourceTable, "obj" + ModuleName)%>)            
        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' saves a <%=ModuleName%> to the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Update)> _
		Public Sub <%= GetMethodName(ModuleName, UpdateKeyword) %>(ByVal obj<%= ModuleName %> As <%= ModuleName %>Info)
                DataProvider.Instance().<%= GetMethodName(ModuleName, UpdateKeyword) %>(<%= GetPrimaryKeyParametersForObject(SourceTable, "obj" + ModuleName)%>, <%= GetNonPrimaryKeyParametersForObject(SourceTable, "obj" + ModuleName)%>)
        End Sub

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' deletes a <%=ModuleName%> from the database
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        <DataObjectMethod(DataObjectMethodType.Delete)> _
		Public Sub <%=  GetMethodName(ModuleName, DeleteKeyword) %>(ByVal obj<%= ModuleName %> As <%= ModuleName %>Info)
            DataProvider.Instance().<%=  GetMethodName(ModuleName, DeleteKeyword) %>(<%= GetPrimaryKeyParametersForObject(SourceTable, "obj" + ModuleName)%>)
        End Sub

#End Region

<% if (IsSearchable || IsPortable) { %>	
#Region "Optional Interfaces"
	<% } %>
	<% if (IsSearchable) { %>
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' GetSearchItems implements the ISearchable Interface
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        Public Function GetSearchItems(ByVal ModInfo As Entities.Modules.ModuleInfo) As DotNetNuke.Services.Search.SearchItemInfoCollection Implements DotNetNuke.Entities.Modules.ISearchable.GetSearchItems

            Dim SearchItemCollection As New SearchItemInfoCollection
			' Add Implementation Details Here
            Return SearchItemCollection

        End Function
	<% } %>
	<% if (IsPortable) { %>	
        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' ExportModule implements the IPortable ExportModule Interface
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        Public Function ExportModule(ByVal ModuleID As Integer) As String Implements DotNetNuke.Entities.Modules.IPortable.ExportModule

            Dim strXML As String = ""
			' Add Implementation Details Here
            Return strXML

        End Function

        ''' -----------------------------------------------------------------------------
        ''' <summary>
        ''' ImportModule implements the IPortable ImportModule Interface
        ''' </summary>
        ''' <remarks>
        ''' </remarks>
        ''' <history>
        ''' </history>
        ''' -----------------------------------------------------------------------------
        Public Sub ImportModule(ByVal ModuleID As Integer, ByVal Content As String, ByVal Version As String, ByVal UserId As Integer) Implements DotNetNuke.Entities.Modules.IPortable.ImportModule
			' Add Implementation Details Here
        End Sub
	<% } %>
<% if (IsSearchable || IsPortable) { %>	
#End Region
<% } %>
    End Class
End Namespace


<!-- #include file="%%DNN4%%CommonFunctions.cs" -->