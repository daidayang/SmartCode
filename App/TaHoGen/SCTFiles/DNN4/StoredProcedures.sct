<%@ CodeTemplate Language="C#" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" TargetLanguage="T-SQL" Description="Generates SELECT/INSERT/UPDATE/DELETE stored procedure based on a database table schema." %>
<%@ Property Name="SourceTable" Type="SmartCode.Model.Mapping.CS.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="InsertKeyword" Type="System.String" Default="Add" Category="Style" Description="Suffix to use for all generated INSERT stored procedures." %>
<%@ Property Name="UpdateKeyword" Type="System.String" Default="Update" Category="Style" Description="Suffix to use for all generated UPDATE stored procedures." %>
<%@ Property Name="DeleteKeyword" Type="System.String" Default="Delete" Category="Style" Description="Suffix to use for all generated DELETE stored procedures." %>
<%@ Property Name="SelectKeyword" Type="System.String" Default="Get" Category="Style" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="ListKeyword" Type="System.String" Default="List" Category="Style" Description="Suffix to use for all generated SELECT stored procedures." %>
<%@ Property Name="ModuleName" Type="System.String" Default="" Category="Style" Description="" %>
<%@ Assembly Name="SmartCode.Model.Mapping" %>
<%@ Import Namespace="SmartCode.Model.Mapping.CS" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%-- 
	Rev 2007.03.03
	For the latest version of this template, http://quiziqal.com/files/default.aspx		
--%>
/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/* =====================================================================================
/   TABLE: <%= ModuleName %>
/  ===================================================================================== */
<% if (SourceTable.PrimaryKey == null) throw new ApplicationException("SourceTable does not contain a primary key."); %>
<% if (SourceTable.PrimaryKey != null) { %>

-- DROP GET PROCEDURE -------------------------------------------------------------------------------------%>
/****** Object:  Stored Procedure <%= GetStoredProcName(ModuleName, SelectKeyword) %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'<%= GetStoredProcName(ModuleName, SelectKeyword) %>') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetStoredProcName(ModuleName, SelectKeyword) %> 
GO

<%
string DropColumnName = "";
string DropKeyword = "";

for( int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++ )
{
	if(SourceTable.NonPrimaryKeyColumns[i].ExtendedProperties["CS_Description"].Value.ToString().ToLower().StartsWith("get"))
	{
		DropColumnName = SourceTable.NonPrimaryKeyColumns[i].Name;
		DropKeyword = SelectKeyword + "By" + DropColumnName;
%>
-- DROP GET BY <%=DropColumnName%> PROCEDURE -------------------------------------------------------------------------------------%>
/****** Object:  Stored Procedure <%= GetStoredProcName(ModuleName, DropKeyword) %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'<%= GetStoredProcName(ModuleName, DropKeyword) %>') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetStoredProcName(ModuleName, DropKeyword) %> 
GO

<%
	} // if
} // for
%>
-- DROP LIST PROCEDURE -------------------------------------------------------------------------------------%>
/****** Object:  Stored Procedure <%= GetStoredProcName(ModuleName, ListKeyword) %>     Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'<%= GetStoredProcName(ModuleName, ListKeyword) %>') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetStoredProcName(ModuleName, ListKeyword) %>
GO

	<% } %>
-- DROP INSERT PROCEDURE -----------------------------------------------------------------------------------%>
/****** Object:  Stored Procedure <%= GetStoredProcName(ModuleName, InsertKeyword) %>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'<%= GetStoredProcName(ModuleName, InsertKeyword)%>') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetStoredProcName(ModuleName, InsertKeyword)%>
GO

-- DROP UPDATE PROCEDURE -------------------------------------------------------------------------------------%>
/****** Object:  Stored Procedure <%= GetStoredProcName(ModuleName, UpdateKeyword)%>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'<%= GetStoredProcName(ModuleName, UpdateKeyword)%>') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetStoredProcName(ModuleName, UpdateKeyword)%>
GO

-- DROP DELETE PROCEDURE -------------------------------------------------------------------------------------%>
/****** Object:  Stored Procedure <%= GetStoredProcName(ModuleName, DeleteKeyword)%>    Script Date: <%= DateTime.Now.ToLongDateString() %> ******/
if exists (select * from dbo.sysobjects where id = object_id(N'<%= GetStoredProcName(ModuleName, DeleteKeyword)%>') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure <%= GetStoredProcName(ModuleName, DeleteKeyword)%>
GO

-- GET PROCEDURE -------------------------------------------------------------------------------------%>
/* -------------------------------------------------------------------------------------
/   <%= GetStoredProcName(ModuleName, SelectKeyword)%>
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE <%= GetStoredProcName(ModuleName, SelectKeyword)%>
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<%= GetSqlParameterStatement(SourceTable.PrimaryKey.MemberColumns[i]) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>,<% } %>
	<% } %>
	<% if (SourceTable.Columns.Contains("moduleId")) {%>,@ModuleID int <% } %>
AS

SELECT
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	[<%= SourceTable.Columns[i].Name %>]<% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
FROM <%= GetObjectQualifier() %><%= SourceTable.Name %>
WHERE
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<% if (i > 0) { %>AND <% } %>([<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns[i].Name%> OR @<%= SourceTable.PrimaryKey.MemberColumns[i].Name %> IS NULL)
	<% } %>
	<% if (SourceTable.Columns.Contains("moduleId")) {%>AND [ModuleID]=@ModuleID <% } %>
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<%
string ColumnName = "";
string Keyword = "";
string WhereClause = "";

for( int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++ )
{
	if(SourceTable.NonPrimaryKeyColumns[i].ExtendedProperties["CS_Description"].Value.ToString().ToLower().StartsWith("get"))
	{
		ColumnName = SourceTable.NonPrimaryKeyColumns[i].Name;
		Keyword = SelectKeyword + "By" + ColumnName;
		WhereClause =  ColumnName + " = @" + ColumnName;
%>

/* -------------------------------------------------------------------------------------
/   <%= GetStoredProcName(ModuleName, Keyword)%> 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE <%= GetStoredProcName(ModuleName, Keyword)%>
	<%= GetSqlParameterStatement(SourceTable.NonPrimaryKeyColumns[i]) %>
	<% if (SourceTable.Columns.Contains("moduleId")) {%>,@ModuleID int <% } %>
AS

SELECT
	<% for (int z = 0; z < SourceTable.Columns.Count; z++) { %>
	[<%= SourceTable.Columns[z].Name %>]<% if (z < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
FROM <%= GetObjectQualifier() %><%= SourceTable.Name %>
WHERE
	<%=WhereClause%>
	<% if (SourceTable.Columns.Contains("moduleId")) {%> AND [ModuleID]=@ModuleID <% } %>
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<%
	} // if
} // for
%>


<%-- LIST PROCEDURE -------------------------------------------------------------------------------------%>
/* -------------------------------------------------------------------------------------
/   <%= GetStoredProcName(ModuleName, ListKeyword)%> 
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE <%= GetStoredProcName(ModuleName, ListKeyword)%>
	<% if (SourceTable.Columns.Contains("moduleId")) {%>@ModuleID int <% } %>
AS

SELECT
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	[<%= SourceTable.Columns[i].Name %>]<% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
FROM <%= GetObjectQualifier() %><%= SourceTable.Name %>
<% if (SourceTable.Columns.Contains("moduleId")) {%>WHERE [ModuleID]=@ModuleID <% } %>
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO


-- INSERT PROCEDURE -------------------------------------------------------------------------------------%>
/* -------------------------------------------------------------------------------------
/   <%= GetStoredProcName(ModuleName, InsertKeyword)%>
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

<% if (SourceTable.PrimaryKey.MemberColumns.Count == 1 && (SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Guid || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int16 || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int32 || SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Int64)) {
	ColumnSchema primaryKey = SourceTable.PrimaryKey.MemberColumns[0];
%>
CREATE PROCEDURE <%= GetStoredProcName(ModuleName, InsertKeyword)%>
	<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
	<%= GetSqlParameterStatement(SourceTable.NonPrimaryKeyColumns[i]) %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>,<% } %>
	<% } %>
AS

<% if (primaryKey.DataType == DbType.Guid) { %>
SET @<%= primaryKey.Name %> = NEWID()

<% } %>
INSERT INTO <%= GetObjectQualifier() %><%= SourceTable.Name %> (
	<% if (primaryKey.DataType == DbType.Guid) { %>
	[<%= primaryKey.Name %>],
	<% } %>
	<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
	[<%= SourceTable.NonPrimaryKeyColumns[i].Name %>]<% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>,<% } %>
	<% } %>
) VALUES (
	<% if (primaryKey.DataType == DbType.Guid) { %>
	@<%= primaryKey.Name %>,
	<% } %>
	<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
	@<%= SourceTable.NonPrimaryKeyColumns[i].Name %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>,<% } %>
	<% } %>
)

select SCOPE_IDENTITY()
<% } else { %>
CREATE PROCEDURE <%= GetStoredProcName(ModuleName, InsertKeyword)%>
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	<%= GetSqlParameterStatement(SourceTable.Columns[i]) %><% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
AS

-- THIS STORED PROCEDURE NEEDS TO BE MANUALLY COMPLETED
-- MULITPLE PRIMARY KEY MEMBERS OR NON-GUID/INT PRIMARY KEY

INSERT INTO <%= GetObjectQualifier() %><%= SourceTable.Name %> (
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	[<%= SourceTable.Columns[i].Name %>]<% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
) VALUES (
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	@<%= SourceTable.Columns[i].Name %><% if (i < SourceTable.Columns.Count - 1) { %>,<% } %>
	<% } %>
)

select SCOPE_IDENTITY()
<% } %>
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

-- UPDATE PROCEDURE -------------------------------------------------------------------------------------%>
/* -------------------------------------------------------------------------------------
/   <%= GetStoredProcName(ModuleName, UpdateKeyword)%>
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE <%= GetStoredProcName(ModuleName, UpdateKeyword)%>
	<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
	<%= GetSqlParameterStatement(SourceTable.Columns[i]) %><% if (i < SourceTable.Columns.Count - 1) { %>,<% } %> <% if (SourceTable.Columns[i].Description.Length > 0) { %>-- <%= SourceTable.Columns[i].Description %><% } %>
	<% } %>
AS

UPDATE <%= GetObjectQualifier() %><%= SourceTable.Name %> SET
	<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>
	[<%= SourceTable.NonPrimaryKeyColumns[i].Name %>] = @<%= SourceTable.NonPrimaryKeyColumns[i].Name %><% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) { %>,<% } %>
	<% } %>
WHERE
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<% if (i > 0) { %>AND <% } %>[<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>
	<% } %>
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<%-- DELETE PROCEDURE -------------------------------------------------------------------------------------%>
/* -------------------------------------------------------------------------------------
/   <%= GetStoredProcName(ModuleName, DeleteKeyword)%>
/  ------------------------------------------------------------------------------------- */
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE <%= GetStoredProcName(ModuleName, DeleteKeyword)%>
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<%= GetSqlParameterStatement(SourceTable.PrimaryKey.MemberColumns[i]) %><% if (i < SourceTable.PrimaryKey.MemberColumns.Count - 1) { %>,<% } %>
	<% } %>
AS

DELETE FROM <%= GetObjectQualifier() %><%= SourceTable.Name %>
WHERE
	<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
	<% if (i > 0) { %>AND <% } %>[<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>] = @<%= SourceTable.PrimaryKey.MemberColumns[i].Name %>
	<% } %>
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

<!-- #include file="%%DNN4%%CommonFunctions.cs" -->